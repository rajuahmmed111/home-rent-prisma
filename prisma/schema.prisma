// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  favoriteIds String[]
  accounts    Account[]
  house       House[]
  reservations Reservation[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String  @unique
  providerAccountId String  @unique
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model House {
  id            String   @id @default(uuid())
  title         String
  description   String
  imageSrc      String
  category      String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  locationValue String
  userId        String
  price         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]

  @@map("house")
}

model Reservation {
  id         String   @id @default(uuid())
  userId     String
  houseId    String
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  house House @relation(fields: [houseId], references: [id], onDelete: Cascade)

  @@map("reservations")
}
